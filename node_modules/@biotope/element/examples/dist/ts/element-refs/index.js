/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ts/element-refs/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../lib/esm/index.js":
/*!***************************!*\
  !*** ../lib/esm/index.js ***!
  \***************************/
/*! exports provided: default, createRef, createRefCallback, createStyle, html, toArray, toBoolean, toFunction, toNumber, toObject, toString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRef\", function() { return createRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRefCallback\", function() { return createRefCallback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createStyle\", function() { return createStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"html\", function() { return html; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toArray\", function() { return toArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toBoolean\", function() { return toBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toFunction\", function() { return toFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toNumber\", function() { return toNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toObject\", function() { return toObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toString\", function() { return toString; });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  <style>\", \"</style>\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar kebabToCamel = function kebabToCamel(string) {\n  return string.replace(/-([a-z])/g, function (_, item) {\n    return item.toUpperCase();\n  });\n};\n\nvar camelToKebab = function camelToKebab(string) {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n};\n\nvar getComponentName = function getComponentName(context) {\n  return context.componentName || camelToKebab(context.name || context.toString().match(/^function\\s*([^\\s(]+)/)[1]);\n};\n\nvar isRegistered = function isRegistered(name) {\n  switch (document.createElement(name).constructor) {\n    case HTMLElement:\n      return false;\n\n    case HTMLUnknownElement:\n      return false;\n\n    default:\n      return true;\n  }\n};\n\nvar parseOrUndefined = function parseOrUndefined(value) {\n  try {\n    return JSON.parse(value);\n  } catch (_) {\n    return undefined;\n  }\n};\n\nvar toBoolean = function toBoolean(prop) {\n  if (typeof prop === 'boolean') {\n    return prop;\n  }\n\n  return !!prop && prop !== 'false' || prop === '';\n};\n\nvar toNumber = function toNumber(prop) {\n  if (typeof prop === 'number') {\n    return prop;\n  }\n\n  var convertedProp = +prop; // eslint-disable-next-line no-self-compare\n\n  if (convertedProp !== convertedProp) {\n    // if (is NaN)\n    var float = parseFloat(prop);\n    convertedProp = float || float === 0 ? float : convertedProp;\n  }\n\n  return convertedProp;\n};\n\nvar toArray = function toArray(prop) {\n  if (Array.isArray(prop)) {\n    return prop;\n  }\n\n  if (typeof prop === 'string') {\n    var convertedProp = parseOrUndefined(prop);\n    return _typeof(convertedProp) !== 'object' ? null : Object.keys(convertedProp).reduce(function (accumulator, key) {\n      return [].concat(_toConsumableArray(accumulator), [convertedProp[key]]);\n    }, []);\n  }\n\n  if (prop) {\n    try {\n      return Object.keys(prop).reduce(function (acc, key) {\n        return [].concat(_toConsumableArray(acc), [prop[key]]);\n      }, []); // eslint-disable-next-line no-empty\n    } catch (_) {}\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  return _toConsumableArray(new Array(prop));\n};\n\nvar toObject = function toObject(prop) {\n  if (_typeof(prop) === 'object' && !Array.isArray(prop)) {\n    return prop;\n  }\n\n  if (typeof prop === 'string') {\n    var convertedProp = parseOrUndefined(prop);\n    return _typeof(convertedProp) !== 'object' ? null : Object.keys(convertedProp).reduce(function (accumulator, key) {\n      return Object.assign(Object.assign({}, accumulator), _defineProperty({}, key, convertedProp[key]));\n    }, {});\n  }\n\n  if (prop) {\n    try {\n      return Object.keys(prop).reduce(function (acc, key) {\n        return Object.assign(Object.assign({}, acc), _defineProperty({}, key, prop[key]));\n      }, {}); // eslint-disable-next-line no-empty\n    } catch (_) {}\n  }\n\n  return _toConsumableArray(new Array(prop)).reduce(function (acc, value, index) {\n    return Object.assign(Object.assign({}, acc), _defineProperty({}, index, value));\n  }, {});\n};\n\nvar toFunction = function toFunction(prop) {\n  if (typeof prop === 'function') {\n    return prop;\n  }\n\n  try {\n    // eslint-disable-next-line no-new-func\n    return new Function(\"return \".concat(prop, \";\"))();\n  } catch (_) {\n    return null;\n  }\n};\n\nvar toString = function toString(prop) {\n  if (typeof prop === 'string') {\n    return prop;\n  }\n\n  if (!prop || typeof prop.toString !== 'function') {\n    return null;\n  }\n\n  return prop.toString();\n};\n\nvar attributeName = function attributeName(attribute) {\n  return typeof attribute === 'string' ? attribute : attribute.name;\n};\n\nvar attributeValue = function attributeValue(attribute, value) {\n  if (typeof attribute === 'string') {\n    return value;\n  }\n\n  if (typeof attribute.converter === 'function') {\n    return attribute.converter(value);\n  }\n\n  switch (attribute.type || 'string') {\n    case 'boolean':\n      return toBoolean(value);\n\n    case 'number':\n      return toNumber(value);\n\n    case 'array':\n      return toArray(value);\n\n    case 'object':\n      return toObject(value);\n\n    case 'function':\n      return toFunction(value);\n\n    case 'string':\n    default:\n      return toString(value);\n  }\n};\n\nvar _register = function register(context, outputToConsole) {\n  /* eslint-disable no-param-reassign,no-underscore-dangle,func-names */\n  var dashedName = getComponentName(context);\n\n  if (!context.componentName) {\n    if (outputToConsole) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Static property \\\"componentName\\\" missing. Setting it to \\\"\".concat(dashedName, \"\\\"\\u2026\"));\n    }\n\n    context.componentName = dashedName;\n  }\n\n  if (isRegistered(context.componentName)) {\n    if (outputToConsole) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Attempt to re-register component \\\"\".concat(context.componentName, \"\\\". Skipping\\u2026\"));\n    }\n\n    return false;\n  }\n\n  context.dependencies.forEach(function (component) {\n    return component.register(outputToConsole);\n  });\n  var allAttributes = (context.attributes && context.attributes.length ? context.attributes : []).filter(function (attribute) {\n    return attribute;\n  });\n  context.observedAttributes = allAttributes.map(attributeName);\n  allAttributes.forEach(function (attribute) {\n    var name = attributeName(attribute);\n    var nameCamel = kebabToCamel(name);\n    var prop = {\n      get: function get() {\n        return this.props[nameCamel];\n      },\n      set: function set(value) {\n        if (value === null || value === undefined || value === false || value === 'false') {\n          this.removeAttribute(name);\n        } else if (typeof value === 'string') {\n          this.setAttribute(name, value);\n        }\n\n        this.attributeChangedCallback(name, this.props[nameCamel], value);\n      }\n    };\n    Object.defineProperty(context.prototype, name, prop);\n    Object.defineProperty(context.prototype, nameCamel, prop);\n  });\n  var originalConnectedCallback = context.prototype.connectedCallback;\n\n  context.prototype.connectedCallback = function () {\n    var instance = this;\n    originalConnectedCallback.bind(instance)();\n\n    while (instance.__attributeChangedCallbackStack.length) {\n      instance.__attributeChangedCallbackStack.pop()();\n    }\n\n    instance.__created = true;\n    instance.render();\n    instance.emit('connected', undefined, true);\n  };\n\n  var originalAttributeChangedCallback = context.prototype.attributeChangedCallback;\n\n  context.prototype.attributeChangedCallback = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var instance = this;\n\n    var callFunction = function callFunction() {\n      originalAttributeChangedCallback.bind(instance).apply(void 0, args);\n      instance.emit('attributechanged', undefined, true);\n    };\n\n    if (instance.__created) {\n      callFunction();\n    } else {\n      instance.__attributeChangedCallbackStack.unshift(callFunction);\n    }\n  };\n\n  var originalDisconnectedCallback = context.prototype.disconnectedCallback;\n\n  context.prototype.disconnectedCallback = function () {\n    var instance = this;\n    originalDisconnectedCallback.bind(instance)();\n    instance.emit('disconnected', undefined, true);\n  };\n\n  customElements.define(context.componentName, context);\n  return true;\n  /* eslint-enable no-param-reassign,no-underscore-dangle,func-names */\n};\n/*! (c) Andrea Giammarchi - ISC */\n\n\nvar self =  false ||\n/* istanbul ignore next */\n{};\n\ntry {\n  self.WeakMap = WeakMap;\n} catch (WeakMap) {\n  // this could be better but 90% of the time\n  // it's everything developers need as fallback\n  self.WeakMap = function (id, Object) {\n    var dP = Object.defineProperty;\n    var hOP = Object.hasOwnProperty;\n    var proto = WeakMap.prototype;\n\n    proto.delete = function (key) {\n      return this.has(key) && delete key[this._];\n    };\n\n    proto.get = function (key) {\n      return this.has(key) ? key[this._] : void 0;\n    };\n\n    proto.has = function (key) {\n      return hOP.call(key, this._);\n    };\n\n    proto.set = function (key, value) {\n      dP(key, this._, {\n        configurable: true,\n        value: value\n      });\n      return this;\n    };\n\n    return WeakMap;\n\n    function WeakMap(iterable) {\n      dP(this, '_', {\n        value: '_@ungap/weakmap' + id++\n      });\n      if (iterable) iterable.forEach(add, this);\n    }\n\n    function add(pair) {\n      this.set(pair[0], pair[1]);\n    }\n  }(Math.random(), Object);\n}\n\nvar WeakMap$1 = self.WeakMap;\nvar isNoOp = (typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) !== 'object';\n\nvar _templateLiteral = function templateLiteral(tl) {\n  var RAW = 'raw';\n\n  var isBroken = function isBroken(UA) {\n    return /(Firefox|Safari)\\/(\\d+)/.test(UA) && !/(Chrom[eium]+|Android)\\/(\\d+)/.test(UA);\n  };\n\n  var broken = isBroken((document.defaultView.navigator || {}).userAgent);\n  var FTS = !(RAW in tl) || tl.propertyIsEnumerable(RAW) || !Object.isFrozen(tl[RAW]);\n\n  if (broken || FTS) {\n    var forever = {};\n\n    var foreverCache = function foreverCache(tl) {\n      for (var key = '.', i = 0; i < tl.length; i++) {\n        key += tl[i].length + '.' + tl[i];\n      }\n\n      return forever[key] || (forever[key] = tl);\n    }; // Fallback TypeScript shenanigans\n\n\n    if (FTS) _templateLiteral = foreverCache; // try fast path for other browsers:\n    // store the template as WeakMap key\n    // and forever cache it only when it's not there.\n    // this way performance is still optimal,\n    // penalized only when there are GC issues\n    else {\n        var wm = new WeakMap$1();\n\n        var set = function set(tl, unique) {\n          wm.set(tl, unique);\n          return unique;\n        };\n\n        _templateLiteral = function templateLiteral(tl) {\n          return wm.get(tl) || set(tl, foreverCache(tl));\n        };\n      }\n  } else {\n    isNoOp = true;\n  }\n\n  return TL(tl);\n};\n\nfunction TL(tl) {\n  return isNoOp ? tl : _templateLiteral(tl);\n}\n\nfunction tta(template) {\n  var length = arguments.length;\n  var args = [TL(template)];\n  var i = 1;\n\n  while (i < length) {\n    args.push(arguments[i++]);\n  }\n\n  return args;\n}\n/*! (c) Andrea Giammarchi - ISC */\n// Custom\n\n\nvar UID = '-' + Math.random().toFixed(6) + '%'; //                           Edge issue!\n\nvar UID_IE = false;\n\ntry {\n  if (!function (template, content, tabindex) {\n    return content in template && (template.innerHTML = '<p ' + tabindex + '=\"' + UID + '\"></p>', template[content].childNodes[0].getAttribute(tabindex) == UID);\n  }(document.createElement('template'), 'content', 'tabindex')) {\n    UID = '_dt: ' + UID.slice(1, -1) + ';';\n    UID_IE = true;\n  }\n} catch (meh) {}\n\nvar UIDC = '<!--' + UID + '-->'; // DOM\n\nvar COMMENT_NODE = 8;\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar SHOULD_USE_TEXT_CONTENT = /^(?:style|textarea)$/i;\nvar VOID_ELEMENTS = /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i;\n/*! (c) Andrea Giammarchi - ISC */\n\nfunction domsanitizer(template) {\n  return template.join(UIDC).replace(selfClosing, fullClosing).replace(attrSeeker, attrReplacer);\n}\n\nvar spaces = ' \\\\f\\\\n\\\\r\\\\t';\nvar almostEverything = '[^' + spaces + '\\\\/>\"\\'=]+';\nvar attrName = '[' + spaces + ']+' + almostEverything;\nvar tagName = '<([A-Za-z]+[A-Za-z0-9:._-]*)((?:';\nvar attrPartials = '(?:\\\\s*=\\\\s*(?:\\'[^\\']*?\\'|\"[^\"]*?\"|<[^>]*?>|' + almostEverything.replace('\\\\/', '') + '))?)';\nvar attrSeeker = new RegExp(tagName + attrName + attrPartials + '+)([' + spaces + ']*/?>)', 'g');\nvar selfClosing = new RegExp(tagName + attrName + attrPartials + '*)([' + spaces + ']*/>)', 'g');\nvar findAttributes = new RegExp('(' + attrName + '\\\\s*=\\\\s*)([\\'\"]?)' + UIDC + '\\\\2', 'gi');\n\nfunction attrReplacer($0, $1, $2, $3) {\n  return '<' + $1 + $2.replace(findAttributes, replaceAttributes) + $3;\n}\n\nfunction replaceAttributes($0, $1, $2) {\n  return $1 + ($2 || '\"') + UID + ($2 || '\"');\n}\n\nfunction fullClosing($0, $1, $2) {\n  return VOID_ELEMENTS.test($1) ? $0 : '<' + $1 + $2 + '></' + $1 + '>';\n}\n/*! (c) Andrea Giammarchi - ISC */\n\n\nvar createContent = function (document) {\n  var FRAGMENT = 'fragment';\n  var TEMPLATE = 'template';\n  var HAS_CONTENT = 'content' in create(TEMPLATE);\n  var createHTML = HAS_CONTENT ? function (html) {\n    var template = create(TEMPLATE);\n    template.innerHTML = html;\n    return template.content;\n  } : function (html) {\n    var content = create(FRAGMENT);\n    var template = create(TEMPLATE);\n    var childNodes = null;\n\n    if (/^[^\\S]*?<(col(?:group)?|t(?:head|body|foot|r|d|h))/i.test(html)) {\n      var selector = RegExp.$1;\n      template.innerHTML = '<table>' + html + '</table>';\n      childNodes = template.querySelectorAll(selector);\n    } else {\n      template.innerHTML = html;\n      childNodes = template.childNodes;\n    }\n\n    append(content, childNodes);\n    return content;\n  };\n  return function createContent(markup, type) {\n    return (type === 'svg' ? createSVG : createHTML)(markup);\n  };\n\n  function append(root, childNodes) {\n    var length = childNodes.length;\n\n    while (length--) {\n      root.appendChild(childNodes[0]);\n    }\n  }\n\n  function create(element) {\n    return element === FRAGMENT ? document.createDocumentFragment() : document.createElementNS('http://www.w3.org/1999/xhtml', element);\n  } // it could use createElementNS when hasNode is there\n  // but this fallback is equally fast and easier to maintain\n  // it is also battle tested already in all IE\n\n\n  function createSVG(svg) {\n    var content = create(FRAGMENT);\n    var template = create('div');\n    template.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + svg + '</svg>';\n    append(content, template.firstChild.childNodes);\n    return content;\n  }\n}(document);\n\nvar iOF = [].indexOf;\n\nvar append = function append(get, parent, children, start, end, before) {\n  var isSelect = 'selectedIndex' in parent;\n  var noSelection = isSelect;\n\n  while (start < end) {\n    var child = get(children[start], 1);\n    parent.insertBefore(child, before);\n\n    if (isSelect && noSelection && child.selected) {\n      noSelection = !noSelection;\n      var selectedIndex = parent.selectedIndex;\n      parent.selectedIndex = selectedIndex < 0 ? start : iOF.call(parent.querySelectorAll('option'), child);\n    }\n\n    start++;\n  }\n};\n\nvar eqeq = function eqeq(a, b) {\n  return a == b;\n};\n\nvar identity = function identity(O) {\n  return O;\n};\n\nvar indexOf = function indexOf(moreNodes, moreStart, moreEnd, lessNodes, lessStart, lessEnd, compare) {\n  var length = lessEnd - lessStart;\n  /* istanbul ignore if */\n\n  if (length < 1) return -1;\n\n  while (moreEnd - moreStart >= length) {\n    var m = moreStart;\n    var l = lessStart;\n\n    while (m < moreEnd && l < lessEnd && compare(moreNodes[m], lessNodes[l])) {\n      m++;\n      l++;\n    }\n\n    if (l === lessEnd) return moreStart;\n    moreStart = m + 1;\n  }\n\n  return -1;\n};\n\nvar isReversed = function isReversed(futureNodes, futureEnd, currentNodes, currentStart, currentEnd, compare) {\n  while (currentStart < currentEnd && compare(currentNodes[currentStart], futureNodes[futureEnd - 1])) {\n    currentStart++;\n    futureEnd--;\n  }\n\n  return futureEnd === 0;\n};\n\nvar next = function next(get, list, i, length, before) {\n  return i < length ? get(list[i], 0) : 0 < i ? get(list[i - 1], -0).nextSibling : before;\n};\n\nvar remove = function remove(get, children, start, end) {\n  while (start < end) {\n    drop(get(children[start++], -1));\n  }\n}; // - - - - - - - - - - - - - - - - - - -\n// diff related constants and utilities\n// - - - - - - - - - - - - - - - - - - -\n\n\nvar DELETION = -1;\nvar INSERTION = 1;\nvar SKIP = 0;\nvar SKIP_OND = 50;\n\nvar HS = function HS(futureNodes, futureStart, futureEnd, futureChanges, currentNodes, currentStart, currentEnd, currentChanges) {\n  var k = 0;\n  /* istanbul ignore next */\n\n  var minLen = futureChanges < currentChanges ? futureChanges : currentChanges;\n  var link = Array(minLen++);\n  var tresh = Array(minLen);\n  tresh[0] = -1;\n\n  for (var i = 1; i < minLen; i++) {\n    tresh[i] = currentEnd;\n  }\n\n  var nodes = currentNodes.slice(currentStart, currentEnd);\n\n  for (var _i = futureStart; _i < futureEnd; _i++) {\n    var index = nodes.indexOf(futureNodes[_i]);\n\n    if (-1 < index) {\n      var idxInOld = index + currentStart;\n      k = findK(tresh, minLen, idxInOld);\n      /* istanbul ignore else */\n\n      if (-1 < k) {\n        tresh[k] = idxInOld;\n        link[k] = {\n          newi: _i,\n          oldi: idxInOld,\n          prev: link[k - 1]\n        };\n      }\n    }\n  }\n\n  k = --minLen;\n  --currentEnd;\n\n  while (tresh[k] > currentEnd) {\n    --k;\n  }\n\n  minLen = currentChanges + futureChanges - k;\n  var diff = Array(minLen);\n  var ptr = link[k];\n  --futureEnd;\n\n  while (ptr) {\n    var _ptr = ptr,\n        newi = _ptr.newi,\n        oldi = _ptr.oldi;\n\n    while (futureEnd > newi) {\n      diff[--minLen] = INSERTION;\n      --futureEnd;\n    }\n\n    while (currentEnd > oldi) {\n      diff[--minLen] = DELETION;\n      --currentEnd;\n    }\n\n    diff[--minLen] = SKIP;\n    --futureEnd;\n    --currentEnd;\n    ptr = ptr.prev;\n  }\n\n  while (futureEnd >= futureStart) {\n    diff[--minLen] = INSERTION;\n    --futureEnd;\n  }\n\n  while (currentEnd >= currentStart) {\n    diff[--minLen] = DELETION;\n    --currentEnd;\n  }\n\n  return diff;\n}; // this is pretty much the same petit-dom code without the delete map part\n// https://github.com/yelouafi/petit-dom/blob/bd6f5c919b5ae5297be01612c524c40be45f14a7/src/vdom.js#L556-L561\n\n\nvar OND = function OND(futureNodes, futureStart, rows, currentNodes, currentStart, cols, compare) {\n  var length = rows + cols;\n  var v = [];\n  var d, k, r, c, pv, cv, pd;\n\n  outer: for (d = 0; d <= length; d++) {\n    /* istanbul ignore if */\n    if (d > SKIP_OND) return null;\n    pd = d - 1;\n    /* istanbul ignore next */\n\n    pv = d ? v[d - 1] : [0, 0];\n    cv = v[d] = [];\n\n    for (k = -d; k <= d; k += 2) {\n      if (k === -d || k !== d && pv[pd + k - 1] < pv[pd + k + 1]) {\n        c = pv[pd + k + 1];\n      } else {\n        c = pv[pd + k - 1] + 1;\n      }\n\n      r = c - k;\n\n      while (c < cols && r < rows && compare(currentNodes[currentStart + c], futureNodes[futureStart + r])) {\n        c++;\n        r++;\n      }\n\n      if (c === cols && r === rows) {\n        break outer;\n      }\n\n      cv[d + k] = c;\n    }\n  }\n\n  var diff = Array(d / 2 + length / 2);\n  var diffIdx = diff.length - 1;\n\n  for (d = v.length - 1; d >= 0; d--) {\n    while (c > 0 && r > 0 && compare(currentNodes[currentStart + c - 1], futureNodes[futureStart + r - 1])) {\n      // diagonal edge = equality\n      diff[diffIdx--] = SKIP;\n      c--;\n      r--;\n    }\n\n    if (!d) break;\n    pd = d - 1;\n    /* istanbul ignore next */\n\n    pv = d ? v[d - 1] : [0, 0];\n    k = c - r;\n\n    if (k === -d || k !== d && pv[pd + k - 1] < pv[pd + k + 1]) {\n      // vertical edge = insertion\n      r--;\n      diff[diffIdx--] = INSERTION;\n    } else {\n      // horizontal edge = deletion\n      c--;\n      diff[diffIdx--] = DELETION;\n    }\n  }\n\n  return diff;\n};\n\nvar applyDiff = function applyDiff(diff, get, parentNode, futureNodes, futureStart, currentNodes, currentStart, currentLength, before) {\n  var live = [];\n  var length = diff.length;\n  var currentIndex = currentStart;\n  var i = 0;\n\n  while (i < length) {\n    switch (diff[i++]) {\n      case SKIP:\n        futureStart++;\n        currentIndex++;\n        break;\n\n      case INSERTION:\n        // TODO: bulk appends for sequential nodes\n        live.push(futureNodes[futureStart]);\n        append(get, parentNode, futureNodes, futureStart++, futureStart, currentIndex < currentLength ? get(currentNodes[currentIndex], 0) : before);\n        break;\n\n      case DELETION:\n        currentIndex++;\n        break;\n    }\n  }\n\n  i = 0;\n\n  while (i < length) {\n    switch (diff[i++]) {\n      case SKIP:\n        currentStart++;\n        break;\n\n      case DELETION:\n        // TODO: bulk removes for sequential nodes\n        if (-1 < live.indexOf(currentNodes[currentStart])) currentStart++;else remove(get, currentNodes, currentStart++, currentStart);\n        break;\n    }\n  }\n};\n\nvar findK = function findK(ktr, length, j) {\n  var lo = 1;\n  var hi = length;\n\n  while (lo < hi) {\n    var mid = (lo + hi) / 2 >>> 0;\n    if (j < ktr[mid]) hi = mid;else lo = mid + 1;\n  }\n\n  return lo;\n};\n\nvar smartDiff = function smartDiff(get, parentNode, futureNodes, futureStart, futureEnd, futureChanges, currentNodes, currentStart, currentEnd, currentChanges, currentLength, compare, before) {\n  applyDiff(OND(futureNodes, futureStart, futureChanges, currentNodes, currentStart, currentChanges, compare) || HS(futureNodes, futureStart, futureEnd, futureChanges, currentNodes, currentStart, currentEnd, currentChanges), get, parentNode, futureNodes, futureStart, currentNodes, currentStart, currentLength, before);\n};\n\nvar drop = function drop(node) {\n  return (node.remove || dropChild).call(node);\n};\n\nfunction dropChild() {\n  var parentNode = this.parentNode;\n  /* istanbul ignore else */\n\n  if (parentNode) parentNode.removeChild(this);\n}\n/*! (c) 2018 Andrea Giammarchi (ISC) */\n\n\nvar domdiff = function domdiff(parentNode, // where changes happen\ncurrentNodes, // Array of current items/nodes\nfutureNodes, // Array of future items/nodes\noptions // optional object with one of the following properties\n//  before: domNode\n//  compare(generic, generic) => true if same generic\n//  node(generic) => Node\n) {\n  if (!options) options = {};\n  var compare = options.compare || eqeq;\n  var get = options.node || identity;\n  var before = options.before == null ? null : get(options.before, 0);\n  var currentLength = currentNodes.length;\n  var currentEnd = currentLength;\n  var currentStart = 0;\n  var futureEnd = futureNodes.length;\n  var futureStart = 0; // common prefix\n\n  while (currentStart < currentEnd && futureStart < futureEnd && compare(currentNodes[currentStart], futureNodes[futureStart])) {\n    currentStart++;\n    futureStart++;\n  } // common suffix\n\n\n  while (currentStart < currentEnd && futureStart < futureEnd && compare(currentNodes[currentEnd - 1], futureNodes[futureEnd - 1])) {\n    currentEnd--;\n    futureEnd--;\n  }\n\n  var currentSame = currentStart === currentEnd;\n  var futureSame = futureStart === futureEnd; // same list\n\n  if (currentSame && futureSame) return futureNodes; // only stuff to add\n\n  if (currentSame && futureStart < futureEnd) {\n    append(get, parentNode, futureNodes, futureStart, futureEnd, next(get, currentNodes, currentStart, currentLength, before));\n    return futureNodes;\n  } // only stuff to remove\n\n\n  if (futureSame && currentStart < currentEnd) {\n    remove(get, currentNodes, currentStart, currentEnd);\n    return futureNodes;\n  }\n\n  var currentChanges = currentEnd - currentStart;\n  var futureChanges = futureEnd - futureStart;\n  var i = -1; // 2 simple indels: the shortest sequence is a subsequence of the longest\n\n  if (currentChanges < futureChanges) {\n    i = indexOf(futureNodes, futureStart, futureEnd, currentNodes, currentStart, currentEnd, compare); // inner diff\n\n    if (-1 < i) {\n      append(get, parentNode, futureNodes, futureStart, i, get(currentNodes[currentStart], 0));\n      append(get, parentNode, futureNodes, i + currentChanges, futureEnd, next(get, currentNodes, currentEnd, currentLength, before));\n      return futureNodes;\n    }\n  }\n  /* istanbul ignore else */\n  else if (futureChanges < currentChanges) {\n      i = indexOf(currentNodes, currentStart, currentEnd, futureNodes, futureStart, futureEnd, compare); // outer diff\n\n      if (-1 < i) {\n        remove(get, currentNodes, currentStart, i);\n        remove(get, currentNodes, i + futureChanges, currentEnd);\n        return futureNodes;\n      }\n    } // common case with one replacement for many nodes\n  // or many nodes replaced for a single one\n\n  /* istanbul ignore else */\n\n\n  if (currentChanges < 2 || futureChanges < 2) {\n    append(get, parentNode, futureNodes, futureStart, futureEnd, get(currentNodes[currentStart], 0));\n    remove(get, currentNodes, currentStart, currentEnd);\n    return futureNodes;\n  } // the half match diff part has been skipped in petit-dom\n  // https://github.com/yelouafi/petit-dom/blob/bd6f5c919b5ae5297be01612c524c40be45f14a7/src/vdom.js#L391-L397\n  // accordingly, I think it's safe to skip in here too\n  // if one day it'll come out like the speediest thing ever to do\n  // then I might add it in here too\n  // Extra: before going too fancy, what about reversed lists ?\n  //        This should bail out pretty quickly if that's not the case.\n\n\n  if (currentChanges === futureChanges && isReversed(futureNodes, futureEnd, currentNodes, currentStart, currentEnd, compare)) {\n    append(get, parentNode, futureNodes, futureStart, futureEnd, next(get, currentNodes, currentEnd, currentLength, before));\n    return futureNodes;\n  } // last resort through a smart diff\n\n\n  smartDiff(get, parentNode, futureNodes, futureStart, futureEnd, futureChanges, currentNodes, currentStart, currentEnd, currentChanges, currentLength, compare, before);\n  return futureNodes;\n};\n/*! (c) Andrea Giammarchi - ISC */\n\n\nvar importNode = function (document, appendChild, cloneNode, createTextNode, importNode) {\n  var native = importNode in document; // IE 11 has problems with cloning templates:\n  // it \"forgets\" empty childNodes. This feature-detects that.\n\n  var fragment = document.createDocumentFragment();\n  fragment[appendChild](document[createTextNode]('g'));\n  fragment[appendChild](document[createTextNode](''));\n  var content = native ? document[importNode](fragment, true) : fragment[cloneNode](true);\n  return content.childNodes.length < 2 ? function importNode(node, deep) {\n    var clone = node[cloneNode]();\n\n    for (var childNodes = node.childNodes || [], length = childNodes.length, i = 0; deep && i < length; i++) {\n      clone[appendChild](importNode(childNodes[i], deep));\n    }\n\n    return clone;\n  } : native ? document[importNode] : function (node, deep) {\n    return node[cloneNode](!!deep);\n  };\n}(document, 'appendChild', 'cloneNode', 'createTextNode', 'importNode');\n\nvar trim = ''.trim || function () {\n  return String(this).replace(/^\\s+|\\s+/g, '');\n};\n/* istanbul ignore next */\n\n\nvar normalizeAttributes = UID_IE ? function (attributes, parts) {\n  var html = parts.join(' ');\n  return parts.slice.call(attributes, 0).sort(function (left, right) {\n    return html.indexOf(left.name) <= html.indexOf(right.name) ? -1 : 1;\n  });\n} : function (attributes, parts) {\n  return parts.slice.call(attributes, 0);\n};\n\nfunction find(node, path) {\n  var length = path.length;\n  var i = 0;\n\n  while (i < length) {\n    node = node.childNodes[path[i++]];\n  }\n\n  return node;\n}\n\nfunction parse(node, holes, parts, path) {\n  var childNodes = node.childNodes;\n  var length = childNodes.length;\n  var i = 0;\n\n  while (i < length) {\n    var child = childNodes[i];\n\n    switch (child.nodeType) {\n      case ELEMENT_NODE:\n        var childPath = path.concat(i);\n        parseAttributes(child, holes, parts, childPath);\n        parse(child, holes, parts, childPath);\n        break;\n\n      case COMMENT_NODE:\n        var textContent = child.textContent;\n\n        if (textContent === UID) {\n          parts.shift();\n          holes.push( // basicHTML or other non standard engines\n          // might end up having comments in nodes\n          // where they shouldn't, hence this check.\n          SHOULD_USE_TEXT_CONTENT.test(node.nodeName) ? Text(node, path) : Any(child, path.concat(i)));\n        } else {\n          switch (textContent.slice(0, 2)) {\n            case '/*':\n              if (textContent.slice(-2) !== '*/') break;\n\n            case \"\\uD83D\\uDC7B\":\n              // ghost\n              node.removeChild(child);\n              i--;\n              length--;\n          }\n        }\n\n        break;\n\n      case TEXT_NODE:\n        // the following ignore is actually covered by browsers\n        // only basicHTML ends up on previous COMMENT_NODE case\n        // instead of TEXT_NODE because it knows nothing about\n        // special style or textarea behavior\n\n        /* istanbul ignore if */\n        if (SHOULD_USE_TEXT_CONTENT.test(node.nodeName) && trim.call(child.textContent) === UIDC) {\n          parts.shift();\n          holes.push(Text(node, path));\n        }\n\n        break;\n    }\n\n    i++;\n  }\n}\n\nfunction parseAttributes(node, holes, parts, path) {\n  var attributes = node.attributes;\n  var cache = [];\n  var remove = [];\n  var array = normalizeAttributes(attributes, parts);\n  var length = array.length;\n  var i = 0;\n\n  while (i < length) {\n    var attribute = array[i++];\n    var direct = attribute.value === UID;\n    var sparse;\n\n    if (direct || 1 < (sparse = attribute.value.split(UIDC)).length) {\n      var name = attribute.name; // the following ignore is covered by IE\n      // and the IE9 double viewBox test\n\n      /* istanbul ignore else */\n\n      if (cache.indexOf(name) < 0) {\n        cache.push(name);\n        var realName = parts.shift().replace(direct ? /^(?:|[\\S\\s]*?\\s)(\\S+?)\\s*=\\s*('|\")?$/ : new RegExp('^(?:|[\\\\S\\\\s]*?\\\\s)(' + name + ')\\\\s*=\\\\s*(\\'|\")[\\\\S\\\\s]*', 'i'), '$1');\n        var value = attributes[realName] || // the following ignore is covered by browsers\n        // while basicHTML is already case-sensitive\n\n        /* istanbul ignore next */\n        attributes[realName.toLowerCase()];\n        if (direct) holes.push(Attr(value, path, realName, null));else {\n          var skip = sparse.length - 2;\n\n          while (skip--) {\n            parts.shift();\n          }\n\n          holes.push(Attr(value, path, realName, sparse));\n        }\n      }\n\n      remove.push(attribute);\n    }\n  }\n\n  length = remove.length;\n  i = 0;\n  /* istanbul ignore next */\n\n  var cleanValue = 0 < length && UID_IE && !('ownerSVGElement' in node);\n\n  while (i < length) {\n    // Edge HTML bug #16878726\n    var attr = remove[i++]; // IE/Edge bug lighterhtml#63 - clean the value or it'll persist\n\n    /* istanbul ignore next */\n\n    if (cleanValue) attr.value = ''; // IE/Edge bug lighterhtml#64 - don't use removeAttributeNode\n\n    node.removeAttribute(attr.name);\n  } // This is a very specific Firefox/Safari issue\n  // but since it should be a not so common pattern,\n  // it's probably worth patching regardless.\n  // Basically, scripts created through strings are death.\n  // You need to create fresh new scripts instead.\n  // TODO: is there any other node that needs such nonsense?\n\n\n  var nodeName = node.nodeName;\n\n  if (/^script$/i.test(nodeName)) {\n    // this used to be like that\n    // var script = createElement(node, nodeName);\n    // then Edge arrived and decided that scripts created\n    // through template documents aren't worth executing\n    // so it became this ... hopefully it won't hurt in the wild\n    var script = document.createElement(nodeName);\n    length = attributes.length;\n    i = 0;\n\n    while (i < length) {\n      script.setAttributeNode(attributes[i++].cloneNode(true));\n    }\n\n    script.textContent = node.textContent;\n    node.parentNode.replaceChild(script, node);\n  }\n}\n\nfunction Any(node, path) {\n  return {\n    type: 'any',\n    node: node,\n    path: path\n  };\n}\n\nfunction Attr(node, path, name, sparse) {\n  return {\n    type: 'attr',\n    node: node,\n    path: path,\n    name: name,\n    sparse: sparse\n  };\n}\n\nfunction Text(node, path) {\n  return {\n    type: 'text',\n    node: node,\n    path: path\n  };\n} // globals\n\n\nvar parsed = new WeakMap$1();\n\nfunction createInfo(options, template) {\n  var markup = (options.convert || domsanitizer)(template);\n  var transform = options.transform;\n  if (transform) markup = transform(markup);\n  var content = createContent(markup, options.type);\n  cleanContent(content);\n  var holes = [];\n  parse(content, holes, template.slice(0), []);\n  var info = {\n    content: content,\n    updates: function updates(content) {\n      var updates = [];\n      var len = holes.length;\n      var i = 0;\n      var off = 0;\n\n      while (i < len) {\n        var info = holes[i++];\n        var node = find(content, info.path);\n\n        switch (info.type) {\n          case 'any':\n            updates.push({\n              fn: options.any(node, []),\n              sparse: false\n            });\n            break;\n\n          case 'attr':\n            var sparse = info.sparse;\n            var fn = options.attribute(node, info.name, info.node);\n            if (sparse === null) updates.push({\n              fn: fn,\n              sparse: false\n            });else {\n              off += sparse.length - 2;\n              updates.push({\n                fn: fn,\n                sparse: true,\n                values: sparse\n              });\n            }\n            break;\n\n          case 'text':\n            updates.push({\n              fn: options.text(node),\n              sparse: false\n            });\n            node.textContent = '';\n            break;\n        }\n      }\n\n      len += off;\n      return function () {\n        var length = arguments.length;\n\n        if (len !== length - 1) {\n          throw new Error(length - 1 + ' values instead of ' + len + '\\n' + template.join('${value}'));\n        }\n\n        var i = 1;\n        var off = 1;\n\n        while (i < length) {\n          var update = updates[i - off];\n\n          if (update.sparse) {\n            var values = update.values;\n            var value = values[0];\n            var j = 1;\n            var l = values.length;\n            off += l - 2;\n\n            while (j < l) {\n              value += arguments[i++] + values[j++];\n            }\n\n            update.fn(value);\n          } else update.fn(arguments[i++]);\n        }\n\n        return content;\n      };\n    }\n  };\n  parsed.set(template, info);\n  return info;\n}\n\nfunction createDetails(options, template) {\n  var info = parsed.get(template) || createInfo(options, template);\n  return info.updates(importNode.call(document, info.content, true));\n}\n\nvar empty = [];\n\nfunction domtagger(options) {\n  var previous = empty;\n  var updates = cleanContent;\n  return function (template) {\n    if (previous !== template) updates = createDetails(options, previous = template);\n    return updates.apply(null, arguments);\n  };\n}\n\nfunction cleanContent(fragment) {\n  var childNodes = fragment.childNodes;\n  var i = childNodes.length;\n\n  while (i--) {\n    var child = childNodes[i];\n\n    if (child.nodeType !== 1 && trim.call(child.textContent).length === 0) {\n      fragment.removeChild(child);\n    }\n  }\n}\n/*! (c) Andrea Giammarchi - ISC */\n\n\nvar hyperStyle = function () {\n  // from https://github.com/developit/preact/blob/33fc697ac11762a1cb6e71e9847670d047af7ce5/src/varants.js\n  var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n  var hyphen = /([^A-Z])([A-Z]+)/g;\n  return function hyperStyle(node, original) {\n    return 'ownerSVGElement' in node ? svg(node, original) : update(node.style, false);\n  };\n\n  function ized($0, $1, $2) {\n    return $1 + '-' + $2.toLowerCase();\n  }\n\n  function svg(node, original) {\n    var style;\n    if (original) style = original.cloneNode(true);else {\n      node.setAttribute('style', '--hyper:style;');\n      style = node.getAttributeNode('style');\n    }\n    style.value = '';\n    node.setAttributeNode(style);\n    return update(style, true);\n  }\n\n  function toStyle(object) {\n    var key,\n        css = [];\n\n    for (key in object) {\n      css.push(key.replace(hyphen, ized), ':', object[key], ';');\n    }\n\n    return css.join('');\n  }\n\n  function update(style, isSVG) {\n    var oldType, oldValue;\n    return function (newValue) {\n      var info, key, styleValue, value;\n\n      switch (_typeof(newValue)) {\n        case 'object':\n          if (newValue) {\n            if (oldType === 'object') {\n              if (!isSVG) {\n                if (oldValue !== newValue) {\n                  for (key in oldValue) {\n                    if (!(key in newValue)) {\n                      style[key] = '';\n                    }\n                  }\n                }\n              }\n            } else {\n              if (isSVG) style.value = '';else style.cssText = '';\n            }\n\n            info = isSVG ? {} : style;\n\n            for (key in newValue) {\n              value = newValue[key];\n              styleValue = typeof value === 'number' && !IS_NON_DIMENSIONAL.test(key) ? value + 'px' : value;\n              if (!isSVG && /^--/.test(key)) info.setProperty(key, styleValue);else info[key] = styleValue;\n            }\n\n            oldType = 'object';\n            if (isSVG) style.value = toStyle(oldValue = info);else oldValue = newValue;\n            break;\n          }\n\n        default:\n          if (oldValue != newValue) {\n            oldType = 'string';\n            oldValue = newValue;\n            if (isSVG) style.value = newValue || '';else style.cssText = newValue || '';\n          }\n\n          break;\n      }\n    };\n  }\n}();\n/*! (c) Andrea Giammarchi - ISC */\n\n\nvar Wire = function (slice, proto) {\n  proto = Wire.prototype;\n  proto.ELEMENT_NODE = 1;\n  proto.nodeType = 111;\n\n  proto.remove = function (keepFirst) {\n    var childNodes = this.childNodes;\n    var first = this.firstChild;\n    var last = this.lastChild;\n    this._ = null;\n\n    if (keepFirst && childNodes.length === 2) {\n      last.parentNode.removeChild(last);\n    } else {\n      var range = this.ownerDocument.createRange();\n      range.setStartBefore(keepFirst ? childNodes[1] : first);\n      range.setEndAfter(last);\n      range.deleteContents();\n    }\n\n    return first;\n  };\n\n  proto.valueOf = function (forceAppend) {\n    var fragment = this._;\n    var noFragment = fragment == null;\n    if (noFragment) fragment = this._ = this.ownerDocument.createDocumentFragment();\n\n    if (noFragment || forceAppend) {\n      for (var n = this.childNodes, i = 0, l = n.length; i < l; i++) {\n        fragment.appendChild(n[i]);\n      }\n    }\n\n    return fragment;\n  };\n\n  return Wire;\n\n  function Wire(childNodes) {\n    var nodes = this.childNodes = slice.call(childNodes, 0);\n    this.firstChild = nodes[0];\n    this.lastChild = nodes[nodes.length - 1];\n    this.ownerDocument = nodes[0].ownerDocument;\n    this._ = null;\n  }\n}([].slice);\n\nvar isArray = Array.isArray;\nvar create = Object.create,\n    freeze = Object.freeze,\n    keys = Object.keys;\nvar wireType = Wire.prototype.nodeType; // returns nodes from wires and components\n\nvar asNode = function asNode(item, i) {\n  return item.nodeType === wireType ? 1 / i < 0 ? i ? item.remove(true) : item.lastChild : i ? item.valueOf(true) : item.firstChild : item;\n}; // returns true if domdiff can handle the value\n\n\nvar canDiff = function canDiff(value) {\n  return 'ELEMENT_NODE' in value;\n}; // generic attributes helpers\n\n\nvar hyperAttribute = function hyperAttribute(node, original) {\n  var oldValue;\n  var owner = false;\n  var attribute = original.cloneNode(true);\n  return function (newValue) {\n    if (oldValue !== newValue) {\n      oldValue = newValue;\n\n      if (attribute.value !== newValue) {\n        if (newValue == null) {\n          if (owner) {\n            owner = false;\n            node.removeAttributeNode(attribute);\n          }\n\n          attribute.value = newValue;\n        } else {\n          attribute.value = newValue;\n\n          if (!owner) {\n            owner = true;\n            node.setAttributeNode(attribute);\n          }\n        }\n      }\n    }\n  };\n}; // events attributes helpers\n\n\nvar hyperEvent = function hyperEvent(node, name) {\n  var oldValue;\n  var type = name.slice(2);\n  if (name.toLowerCase() in node) type = type.toLowerCase();\n  return function (newValue) {\n    if (oldValue !== newValue) {\n      if (oldValue) node.removeEventListener(type, oldValue, false);\n      oldValue = newValue;\n      if (newValue) node.addEventListener(type, newValue, false);\n    }\n  };\n}; // special attributes helpers\n\n\nvar hyperProperty = function hyperProperty(node, name) {\n  var oldValue;\n  return function (newValue) {\n    if (oldValue !== newValue) {\n      oldValue = newValue;\n\n      if (node[name] !== newValue) {\n        if (newValue == null) {\n          // cleanup before dropping the attribute to fix IE/Edge gotcha\n          node[name] = '';\n          node.removeAttribute(name);\n        } else node[name] = newValue;\n      }\n    }\n  };\n}; // special hooks helpers\n\n\nvar hyperRef = function hyperRef(node) {\n  return function (ref) {\n    ref.current = node;\n  };\n};\n\nvar hyperSetter = function hyperSetter(node, name, svg) {\n  return svg ? function (value) {\n    try {\n      node[name] = value;\n    } catch (nope) {\n      node.setAttribute(name, value);\n    }\n  } : function (value) {\n    node[name] = value;\n  };\n}; // list of attributes that should not be directly assigned\n\n\nvar readOnly = /^(?:form|list)$/i; // reused every slice time\n\nvar slice = [].slice; // simplifies text node creation\n\nvar text = function text(node, _text) {\n  return node.ownerDocument.createTextNode(_text);\n};\n\nfunction Tagger(type) {\n  this.type = type;\n  return domtagger(this);\n}\n\nTagger.prototype = {\n  // there are four kind of attributes, and related behavior:\n  //  * events, with a name starting with `on`, to add/remove event listeners\n  //  * special, with a name present in their inherited prototype, accessed directly\n  //  * regular, accessed through get/setAttribute standard DOM methods\n  //  * style, the only regular attribute that also accepts an object as value\n  //    so that you can style=${{width: 120}}. In this case, the behavior has been\n  //    fully inspired by Preact library and its simplicity.\n  attribute: function attribute(node, name, original) {\n    var isSVG = this.type === 'svg';\n\n    switch (name) {\n      case 'class':\n        if (isSVG) return hyperAttribute(node, original);\n        name = 'className';\n\n      case 'data':\n      case 'props':\n        return hyperProperty(node, name);\n\n      case 'style':\n        return hyperStyle(node, original, isSVG);\n\n      case 'ref':\n        return hyperRef(node);\n\n      default:\n        if (name.slice(0, 1) === '.') return hyperSetter(node, name.slice(1), isSVG);\n        if (name.slice(0, 2) === 'on') return hyperEvent(node, name);\n        if (name in node && !(isSVG || readOnly.test(name))) return hyperProperty(node, name);\n        return hyperAttribute(node, original);\n    }\n  },\n  // in a hyper(node)`<div>${content}</div>` case\n  // everything could happen:\n  //  * it's a JS primitive, stored as text\n  //  * it's null or undefined, the node should be cleaned\n  //  * it's a promise, update the content once resolved\n  //  * it's an explicit intent, perform the desired operation\n  //  * it's an Array, resolve all values if Promises and/or\n  //    update the node with the resulting list of content\n  any: function any(node, childNodes) {\n    var diffOptions = {\n      node: asNode,\n      before: node\n    };\n    var type = this.type;\n    var fastPath = false;\n    var oldValue;\n\n    var anyContent = function anyContent(value) {\n      switch (_typeof(value)) {\n        case 'string':\n        case 'number':\n        case 'boolean':\n          if (fastPath) {\n            if (oldValue !== value) {\n              oldValue = value;\n              childNodes[0].textContent = value;\n            }\n          } else {\n            fastPath = true;\n            oldValue = value;\n            childNodes = domdiff(node.parentNode, childNodes, [text(node, value)], diffOptions);\n          }\n\n          break;\n\n        case 'function':\n          anyContent(value(node));\n          break;\n\n        case 'object':\n        case 'undefined':\n          if (value == null) {\n            fastPath = false;\n            childNodes = domdiff(node.parentNode, childNodes, [], diffOptions);\n            break;\n          }\n\n        default:\n          fastPath = false;\n          oldValue = value;\n\n          if (isArray(value)) {\n            if (value.length === 0) {\n              if (childNodes.length) {\n                childNodes = domdiff(node.parentNode, childNodes, [], diffOptions);\n              }\n            } else {\n              switch (_typeof(value[0])) {\n                case 'string':\n                case 'number':\n                case 'boolean':\n                  anyContent(String(value));\n                  break;\n\n                case 'function':\n                  anyContent(value.map(invoke, node));\n                  break;\n\n                case 'object':\n                  if (isArray(value[0])) {\n                    value = value.concat.apply([], value);\n                  }\n\n                default:\n                  childNodes = domdiff(node.parentNode, childNodes, value, diffOptions);\n                  break;\n              }\n            }\n          } else if (canDiff(value)) {\n            childNodes = domdiff(node.parentNode, childNodes, value.nodeType === 11 ? slice.call(value.childNodes) : [value], diffOptions);\n          } else if ('text' in value) {\n            anyContent(String(value.text));\n          } else if ('any' in value) {\n            anyContent(value.any);\n          } else if ('html' in value) {\n            childNodes = domdiff(node.parentNode, childNodes, slice.call(createContent([].concat(value.html).join(''), type).childNodes), diffOptions);\n          } else if ('length' in value) {\n            anyContent(slice.call(value));\n          }\n\n          break;\n      }\n    };\n\n    return anyContent;\n  },\n  // style or textareas don't accept HTML as content\n  // it's pointless to transform or analyze anything\n  // different from text there but it's worth checking\n  // for possible defined intents.\n  text: function text(node) {\n    var oldValue;\n\n    var textContent = function textContent(value) {\n      if (oldValue !== value) {\n        oldValue = value;\n\n        var type = _typeof(value);\n\n        if (type === 'object' && value) {\n          if ('text' in value) {\n            textContent(String(value.text));\n          } else if ('any' in value) {\n            textContent(value.any);\n          } else if ('html' in value) {\n            textContent([].concat(value.html).join(''));\n          } else if ('length' in value) {\n            textContent(slice.call(value).join(''));\n          }\n        } else if (type === 'function') {\n          textContent(value(node));\n        } else {\n          node.textContent = value == null ? '' : value;\n        }\n      }\n    };\n\n    return textContent;\n  }\n};\n\nfunction invoke(callback) {\n  return callback(this);\n}\n\nvar cache = new WeakMap$1();\n\nvar createRender = function createRender(Tagger) {\n  return {\n    html: outer('html', Tagger),\n    svg: outer('svg', Tagger),\n    render: function render(where, what) {\n      var hole = typeof what === 'function' ? what() : what;\n      var info = cache.get(where) || setCache(where);\n      var wire = hole instanceof Hole ? retrieve(Tagger, info, hole) : hole;\n\n      if (wire !== info.wire) {\n        info.wire = wire;\n        where.textContent = '';\n        where.appendChild(wire.valueOf(true));\n      }\n\n      return where;\n    }\n  };\n};\n\nvar newInfo = function newInfo() {\n  return {\n    sub: [],\n    stack: [],\n    wire: null\n  };\n};\n\nvar outer = function outer(type, Tagger) {\n  var cache = new WeakMap$1();\n\n  var fixed = function fixed(info) {\n    return function () {\n      return retrieve(Tagger, info, hole.apply(null, arguments));\n    };\n  };\n\n  var set = function set(ref) {\n    var memo = create(null);\n    cache.set(ref, memo);\n    return memo;\n  };\n\n  hole.for = function (ref, id) {\n    var memo = cache.get(ref) || set(ref);\n    return memo[id] || (memo[id] = fixed(newInfo()));\n  };\n\n  hole.node = function () {\n    return retrieve(Tagger, newInfo(), hole.apply(null, arguments)).valueOf(true);\n  };\n\n  return hole;\n\n  function hole() {\n    return new Hole(type, tta.apply(null, arguments));\n  }\n};\n\nvar retrieve = function retrieve(Tagger, info, hole) {\n  var sub = info.sub,\n      stack = info.stack;\n  var counter = {\n    a: 0,\n    aLength: sub.length,\n    i: 0,\n    iLength: stack.length\n  };\n  var wire = unroll(Tagger, info, hole, counter);\n  var a = counter.a,\n      i = counter.i,\n      aLength = counter.aLength,\n      iLength = counter.iLength;\n  if (a < aLength) sub.splice(a);\n  if (i < iLength) stack.splice(i);\n  return wire;\n};\n\nvar setCache = function setCache(where) {\n  var info = newInfo();\n  cache.set(where, info);\n  return info;\n};\n\nvar unroll = function unroll(Tagger, info, hole, counter) {\n  var stack = info.stack;\n  var i = counter.i,\n      iLength = counter.iLength;\n  var type = hole.type,\n      args = hole.args;\n  var unknown = i === iLength;\n  if (unknown) counter.iLength = stack.push({\n    type: type,\n    id: args[0],\n    tag: null,\n    wire: null\n  });\n  counter.i++;\n  unrollArray(Tagger, info, args, counter);\n  var entry = stack[i];\n\n  if (unknown || entry.id !== args[0] || entry.type !== type) {\n    entry.type = type;\n    entry.id = args[0];\n    entry.tag = new Tagger(type);\n    entry.wire = wiredContent(entry.tag.apply(null, args));\n  } else entry.tag.apply(null, args);\n\n  return entry.wire;\n};\n\nvar unrollArray = function unrollArray(Tagger, info, args, counter) {\n  for (var i = 1, length = args.length; i < length; i++) {\n    var hole = args[i];\n\n    if (_typeof(hole) === 'object' && hole) {\n      if (hole instanceof Hole) args[i] = unroll(Tagger, info, hole, counter);else if (isArray(hole)) {\n        for (var _i2 = 0, _length = hole.length; _i2 < _length; _i2++) {\n          var inner = hole[_i2];\n\n          if (_typeof(inner) === 'object' && inner && inner instanceof Hole) {\n            var sub = info.sub;\n            var a = counter.a,\n                aLength = counter.aLength;\n            if (a === aLength) counter.aLength = sub.push(newInfo());\n            counter.a++;\n            hole[_i2] = retrieve(Tagger, sub[a], inner);\n          }\n        }\n      }\n    }\n  }\n};\n\nvar wiredContent = function wiredContent(node) {\n  var childNodes = node.childNodes;\n  var length = childNodes.length;\n  return length === 1 ? childNodes[0] : length ? new Wire(childNodes) : node;\n};\n\nfreeze(Hole);\n\nfunction Hole(type, args) {\n  this.type = type;\n  this.args = args;\n}\n\nvar _createRender = createRender(Tagger),\n    render = _createRender.render,\n    html = _createRender.html,\n    svg = _createRender.svg; // eslint-disable-next-line import/no-extraneous-dependencies\n\n\nvar createRender$1 = function createRender$1(context, originalRender, postFunction) {\n  var renderFunction = render.bind(context, context.shadowRoot || context, function () {\n    var element = originalRender();\n    setTimeout(postFunction);\n    return element;\n  }); // eslint-disable-next-line no-underscore-dangle\n\n  return function () {\n    return context.__created ? renderFunction() : null;\n  };\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar createPartial = function createPartial() {\n  return html;\n};\n\nvar _attributeChangedCallback = function attributeChangedCallback(context, name, previous, current) {\n  var attribute = context.constructor.attributes.filter(function (attr) {\n    return attributeName(attr) === name;\n  })[0];\n\n  if (attribute) {\n    var nameCamel = kebabToCamel(name);\n    var currentValue = attributeValue(attribute, current);\n\n    if (currentValue !== context.props[nameCamel]) {\n      // eslint-disable-next-line no-underscore-dangle,no-param-reassign\n      context.__currentProps = Object.assign(Object.assign({}, context.props), _defineProperty({}, nameCamel, currentValue));\n      context.render();\n    }\n  }\n};\n\nvar _emit = function emit(context, name, detail, singleEmit) {\n  if (!name) {\n    throw Error('No event name defined. Please provide a name.');\n  }\n\n  return context.dispatchEvent(new CustomEvent(name, Object.assign({\n    bubbles: !singleEmit\n  }, detail !== undefined && {\n    detail: detail\n  })));\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar createStyle = function createStyle(styleContent) {\n  return html(_templateObject(), typeof styleContent === 'string' ? styleContent : styleContent.toString());\n};\n\nvar emitRendered = function emitRendered(context, elements) {\n  // eslint-disable-next-line no-underscore-dangle\n  if (!elements.length || !elements.some(function (element) {\n    return !element.__rendered;\n  })) {\n    // eslint-disable-next-line no-underscore-dangle,no-param-reassign\n    context.__rendered = true;\n    context.emit('rendered', undefined, true);\n  } else {\n    setTimeout(function () {\n      return emitRendered(context, elements);\n    });\n  }\n};\n\nvar ready = function ready(context) {\n  // eslint-disable-next-line no-underscore-dangle\n  if (!context.__ready) {\n    // eslint-disable-next-line no-underscore-dangle,no-param-reassign\n    context.__ready = true;\n    context.ready();\n    context.emit('ready', undefined, true);\n  }\n};\n\nvar rendered = function rendered(context) {\n  context.rendered();\n\n  var elements = _toConsumableArray((context.shadowRoot || context).querySelectorAll('*')) // eslint-disable-next-line no-underscore-dangle\n  .filter(function (element) {\n    return typeof element.__rendered === 'boolean';\n  });\n\n  emitRendered(context, elements);\n};\n\nvar render$1 = function render$1(context, renderFunction) {\n  // eslint-disable-next-line no-underscore-dangle,no-param-reassign\n  context.__rendered = false;\n  return renderFunction();\n};\n\nvar createRef = function createRef() {\n  return {\n    current: null\n  };\n};\n\nvar createRefCallback = function createRefCallback(getter) {\n  return {\n    get current() {\n      return getter();\n    }\n\n  };\n}; // eslint-disable-next-line import/no-default-export\n\n\nvar Component =\n/*#__PURE__*/\nfunction (_HTMLElement) {\n  _inheritsLoose(Component, _HTMLElement);\n\n  function Component() {\n    var _this;\n\n    var useShadow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    _this = _HTMLElement.call(this) || this;\n    _this.__created = false;\n    _this.__rendered = false;\n    _this.__ready = false;\n    _this.__attributeChangedCallbackStack = [];\n    _this.createStyle = createStyle;\n\n    if (useShadow) {\n      _this.attachShadow({\n        mode: 'open'\n      });\n    }\n\n    var originalRender = _this.render.bind(_assertThisInitialized(_this));\n\n    _this.render = createRender$1(\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    _assertThisInitialized(_this), function () {\n      return render$1(_assertThisInitialized(_this), originalRender);\n    }, function () {\n      rendered(_assertThisInitialized(_this));\n      ready(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  Component.register = function register() {\n    var outputToConsole = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return _register(this, outputToConsole);\n  }\n  /* istanbul ignore next */\n  // eslint-disable-next-line class-methods-use-this,@typescript-eslint/no-empty-function\n  ;\n\n  var _proto = Component.prototype;\n\n  _proto.connectedCallback = function connectedCallback() {}\n  /* istanbul ignore next */\n  // eslint-disable-next-line class-methods-use-this,@typescript-eslint/no-empty-function\n  ;\n\n  _proto.disconnectedCallback = function disconnectedCallback() {};\n\n  _proto.attributeChangedCallback = function attributeChangedCallback(name, previous, current) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return _attributeChangedCallback(this, name, previous, current);\n  } // eslint-disable-next-line class-methods-use-this\n  ;\n\n  _proto.render = function render() {\n    return null;\n  }\n  /* istanbul ignore next */\n  // eslint-disable-next-line class-methods-use-this,@typescript-eslint/no-empty-function\n  ;\n\n  _proto.rendered = function rendered() {}\n  /* istanbul ignore next */\n  // eslint-disable-next-line class-methods-use-this,@typescript-eslint/no-empty-function\n  ;\n\n  _proto.ready = function ready() {};\n\n  _proto.addEventListener = function addEventListener(type, listener, options) {\n    // eslint-disable-next-line no-underscore-dangle\n    if (type === 'ready' && this.__ready) {\n      listener();\n    } else {\n      _HTMLElement.prototype.addEventListener.call(this, type, listener, options);\n    }\n  };\n\n  _proto.emit = function emit(name, detail) {\n    var singleEmit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return _emit(this, name, detail, singleEmit);\n  };\n\n  _proto.setState = function setState(state) {\n    // eslint-disable-next-line no-underscore-dangle\n    this.__currentState = Object.assign(Object.assign({}, this.state), typeof state === 'function' ? state.call(this, this.state) : state);\n    this.render();\n  };\n\n  _createClass(Component, [{\n    key: \"props\",\n    get: function get() {\n      /* eslint-disable no-underscore-dangle */\n      if (!this.__currentProps) {\n        this.__currentProps = this.defaultProps || {};\n      }\n\n      return this.__currentProps;\n      /* eslint-enable no-underscore-dangle */\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      /* eslint-disable no-underscore-dangle */\n      if (!this.__currentState) {\n        this.__currentState = this.defaultState || {};\n      }\n\n      return this.__currentState;\n      /* eslint-enable no-underscore-dangle */\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      /* eslint-disable no-underscore-dangle */\n      if (!this.__html) {\n        this.__html = createPartial();\n      }\n\n      return this.__html;\n      /* eslint-enable no-underscore-dangle */\n    }\n  }]);\n\n  return Component;\n}(_wrapNativeSuper(HTMLElement));\n\nComponent.dependencies = [];\nComponent.attributes = [];\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component);\n\n\n//# sourceURL=webpack:///../lib/esm/index.js?");

/***/ }),

/***/ "./src/ts/element-refs/index.ts":
/*!**************************************!*\
  !*** ./src/ts/element-refs/index.ts ***!
  \**************************************/
/*! exports provided: ExampleRefs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExampleRefs\", function() { return ExampleRefs; });\n/* harmony import */ var _biotope_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @biotope/element */ \"../lib/esm/index.js\");\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      <input type=\\\"text\\\" ref=\", \" />\\n      <button onclick=\", \">Focus input</button>\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\nvar ExampleRefs =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ExampleRefs, _Component);\n\n  function ExampleRefs() {\n    var _this;\n\n    _this = _Component.call(this) || this;\n    _this.refs = {\n      input: Object(_biotope_element__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])()\n    };\n    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = ExampleRefs.prototype;\n\n  _proto.render = function render() {\n    return this.html(_templateObject(), this.refs.input, this.handleFocus);\n  };\n\n  _proto.handleFocus = function handleFocus() {\n    var input = this.refs.input;\n\n    if (input.current) {\n      input.current.focus();\n    }\n  };\n\n  return ExampleRefs;\n}(_biotope_element__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\nExampleRefs.componentName = 'example-refs';\nExampleRefs.attributes = ['text'];\nExampleRefs.register();\n\n//# sourceURL=webpack:///./src/ts/element-refs/index.ts?");

/***/ })

/******/ });