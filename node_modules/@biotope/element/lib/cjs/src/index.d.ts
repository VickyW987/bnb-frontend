import HyperHTMLElement from 'hyperhtml-element';
import { Attribute } from './types';
export { Attribute };
export default abstract class Component<TProps = any, TState = any> extends HyperHTMLElement<TState> {
    static dependencies: (typeof Component)[];
    static componentName: string;
    static basedOn: string;
    protected static attributes: (string | Attribute)[];
    static readonly observedAttributes: string[];
    static register(): void;
    props: TProps;
    protected readonly defaultProps: TProps;
    protected readonly wire: typeof Component.wire;
    protected readonly hyper: typeof Component.hyper;
    private currentProps;
    constructor(useShadow?: boolean);
    created(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    protected onPropsChanged(): void;
    protected emit<T>(name: string, detail?: T, addPrefix?: boolean): boolean;
    protected createStyle: (styleContent: import("./types").HTMLElementContent) => HTMLStyleElement;
}
