"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cjs_1 = __importDefault(require("hyperhtml-element/cjs"));
const hyperhtml_1 = __importDefault(require("hyperhtml"));
const camelize_1 = require("./camelize");
const register_1 = require("./register");
const attribute_name_mapper_1 = require("./attribute-name-mapper");
class Component extends cjs_1.default {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }
    static register() {
        register_1.register(this);
    }
    static get observedAttributes() {
        return this.attributes.map(attribute_name_mapper_1.attributeNameMapper);
    }
    ;
    // overwrite if you want default props in your component
    get defaultProps() {
        return null;
    }
    get props() {
        return Object.assign({}, this.defaultProps, this.currentProps);
    }
    set props(value) {
        this.currentProps = value;
        this.onPropsChanged();
    }
    get wire() {
        return hyperhtml_1.default.wire;
    }
    get hyper() {
        return hyperhtml_1.default.hyper;
    }
    // overwrite if you, for example, need to fetch something after the component is created
    created() {
        this.render();
    }
    attributeChangedCallback(name, oldValue, newValue) {
        const attribute = this.constructor.attributes
            .find((attr) => attribute_name_mapper_1.attributeNameMapper(attr) === name);
        if (attribute) {
            this.props = Object.assign({}, this.props, { [camelize_1.camelize(name)]: typeof attribute === 'string' ? newValue : attribute.converter(newValue) });
        }
        ;
    }
    // overwrite if you, for example, need to merge props into your state
    onPropsChanged() {
        this.render();
    }
    emit(name, detail, addPrefix = true) {
        return this.dispatchEvent(new CustomEvent(`${addPrefix ? `${this.constructor.componentName}-` : ''}${name}`, Object.assign({ bubbles: true }, (detail !== undefined ? { detail } : {}))));
    }
}
// overwrite to set dependencies
Component.dependencies = [];
// overwrite if some attributes should be auto-merged to your props
Component.attributes = [];
exports.default = Component;
//# sourceMappingURL=index.js.map