import HyperHTMLElement from 'hyperhtml-element/cjs';
import { Attribute } from './types';
export { Attribute };
export default abstract class Component<TProps, TState> extends HyperHTMLElement<TState> {
    static dependencies: (typeof Component)[];
    static componentName: string;
    static register(): void;
    static readonly observedAttributes: string[];
    protected static attributes: (string | Attribute)[];
    protected readonly defaultProps: TProps;
    protected props: TProps;
    protected readonly wire: typeof import("hyperhtml").wire;
    protected readonly hyper: {
        (identity: null, type?: "html" | "svg"): (template: TemplateStringsArray, ...values: any[]) => any;
        (type: "html" | "svg"): (template: TemplateStringsArray, ...values: any[]) => any;
        <T extends Element>(element: T): (template: TemplateStringsArray, ...values: any[]) => T;
        (template: TemplateStringsArray, ...values: any[]): any;
        (identity: object, type?: "html" | "svg"): (template: TemplateStringsArray, ...values: any[]) => any;
        (identity: object, type_id?: string): (template: TemplateStringsArray, ...values: any[]) => any;
        (): (template: TemplateStringsArray, ...values: any[]) => any;
        Component: typeof import("hyperhtml").Component;
        bind: typeof import("hyperhtml").bind;
        define: typeof import("hyperhtml").define;
        hyper: any;
        wire: typeof import("hyperhtml").wire;
    };
    private currentProps;
    constructor();
    created(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    protected onPropsChanged(): void;
    protected emit<T>(name: string, detail?: T, addPrefix?: boolean): boolean;
}
