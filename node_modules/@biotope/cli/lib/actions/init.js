"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const gitClone = require("git-clone");
const rimraf = require("rimraf");
const npm = require("npm");
const chalk_1 = require("chalk");
const defaultProjectName = 'biotope-boilerplate';
const pullRepositoryTo = (name = defaultProjectName) => __awaiter(this, void 0, void 0, function* () {
    console.log(chalk_1.default.green('========================================'));
    console.log(chalk_1.default.green('======== Pulling repository 🏎️  ========='));
    console.log(chalk_1.default.green('========================================'));
    return new Promise((res, rej) => gitClone('https://github.com/biotope/biotope-boilerplate.git', name, res));
});
const cleanup = (name) => {
    process.chdir(name);
    rimraf.sync('./.git');
};
const npmInstall = () => __awaiter(this, void 0, void 0, function* () {
    console.log(chalk_1.default.green('========================================'));
    console.log(chalk_1.default.green('====== Installing dependencies 💻  ======'));
    console.log(chalk_1.default.green('========================================'));
    yield new Promise((res, rej) => npm.load(res));
    npm.on('log', (message) => {
        console.log(message);
    });
    return new Promise((res, rej) => npm.commands.install(res));
});
const notifySuccess = () => {
    console.log(chalk_1.default.green('========================================'));
    console.log(chalk_1.default.green('====== Everything ready to go 👍  ======='));
    console.log(chalk_1.default.green('========================================'));
};
const init = (name = defaultProjectName) => __awaiter(this, void 0, void 0, function* () {
    yield pullRepositoryTo(name);
    cleanup(name);
    yield npmInstall();
    notifySuccess();
});
exports.registerInit = commander => commander
    .command('init [name]')
    .action(init);
